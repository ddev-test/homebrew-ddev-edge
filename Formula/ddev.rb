# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Ddev < Formula
  desc "DDEV"
  homepage "https://github.com/ddev-test/ddev"
  version "1.23.16"
  license "Apache 2"

  depends_on "mkcert"

  on_macos do
    on_intel do
      url "https://github.com/ddev-test/ddev/releases/download/v1.23.16/ddev_macos-amd64.v1.23.16.tar.gz"
      sha256 "b07666f94e8c786c8aaeb1c6db18c4944e837a1a41fea7f807b5a8a71bc5a04b"

      def install
        if build.head?
            resource("ddev-artifacts").unpack buildpath

            # Get the appropriate inner zipfile based on architecture
            os = OS.mac? ? "darwin" : "linux"
            arch = Hardware::CPU.arm? ? "arm64" : "amd64"
            inner_zip = "ddev_#{os}_#{arch}.zip"

            system "unzip", "-o", inner_zip, "-d", buildpath

            bin.install "ddev"
            bash_completion.install "ddev_bash_completion.sh" => "ddev"
            zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
            fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
        else
            bin.install "ddev"
            bash_completion.install "ddev_bash_completion.sh" => "ddev"
            zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
            fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
        end
      end
    end
    on_arm do
      url "https://github.com/ddev-test/ddev/releases/download/v1.23.16/ddev_macos-arm64.v1.23.16.tar.gz"
      sha256 "cc4cc34aece6bff6d754ba170ce04cc433649779067e274a5067c7ce0b79f44d"

      def install
        if build.head?
            resource("ddev-artifacts").unpack buildpath

            # Get the appropriate inner zipfile based on architecture
            os = OS.mac? ? "darwin" : "linux"
            arch = Hardware::CPU.arm? ? "arm64" : "amd64"
            inner_zip = "ddev_#{os}_#{arch}.zip"

            system "unzip", "-o", inner_zip, "-d", buildpath

            bin.install "ddev"
            bash_completion.install "ddev_bash_completion.sh" => "ddev"
            zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
            fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
        else
            bin.install "ddev"
            bash_completion.install "ddev_bash_completion.sh" => "ddev"
            zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
            fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
        end
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/ddev-test/ddev/releases/download/v1.23.16/ddev_linux-amd64.v1.23.16.tar.gz"
        sha256 "3307f02a0ef4d319dd9b88a1498f40c1eb5423095f7f334bfe03ceacca1f7d97"

        def install
          if build.head?
              resource("ddev-artifacts").unpack buildpath

              # Get the appropriate inner zipfile based on architecture
              os = OS.mac? ? "darwin" : "linux"
              arch = Hardware::CPU.arm? ? "arm64" : "amd64"
              inner_zip = "ddev_#{os}_#{arch}.zip"

              system "unzip", "-o", inner_zip, "-d", buildpath

              bin.install "ddev"
              bash_completion.install "ddev_bash_completion.sh" => "ddev"
              zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
              fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
          else
              bin.install "ddev"
              bash_completion.install "ddev_bash_completion.sh" => "ddev"
              zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
              fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
          end
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/ddev-test/ddev/releases/download/v1.23.16/ddev_linux-arm64.v1.23.16.tar.gz"
        sha256 "facec8ee81a026f3c5e2936a1dc233327b63723bd7a0a0e33cb8d44c8d9e5007"

        def install
          if build.head?
              resource("ddev-artifacts").unpack buildpath

              # Get the appropriate inner zipfile based on architecture
              os = OS.mac? ? "darwin" : "linux"
              arch = Hardware::CPU.arm? ? "arm64" : "amd64"
              inner_zip = "ddev_#{os}_#{arch}.zip"

              system "unzip", "-o", inner_zip, "-d", buildpath

              bin.install "ddev"
              bash_completion.install "ddev_bash_completion.sh" => "ddev"
              zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
              fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
          else
              bin.install "ddev"
              bash_completion.install "ddev_bash_completion.sh" => "ddev"
              zsh_completion.install "ddev_zsh_completion.sh" => "_ddev"
              fish_completion.install "ddev_fish_completion.sh" => "ddev.fish"
          end
        end
      end
    end
  end

  # Define custom download strategy
  class NoVerifyDownloadStrategy < AbstractDownloadStrategy
    def fetch(_timeout: nil, **_options)
      ohai "Downloading #{@url}"
      curl_download @url, to: temporary_path
    end

    def cached_location
      temporary_path
    end

    def clear_cache
      rm_rf(temporary_path)
    end
  end

  head do
    url "https://github.com/ddev-test/ddev.git", branch: "master"
    resource "ddev-artifacts" do
      url "https://nightly.link/ddev-test/ddev/workflows/master-build/master/ddev-head-artifacts.zip"
      using NoVerifyDownloadStrategy
    end
  end

  test do
    system "#{bin}/ddev --version"
  end
end
